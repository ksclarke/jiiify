<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <artifactId>jiiify</artifactId>
  <packaging>jar</packaging>
  <version>0.0.2-SNAPSHOT</version>
  <name>The Jiiify Image Server</name>
  <description>A Java-based IIIF Image Server</description>

  <licenses>
    <license>
      <name>The 3-Clause BSD License</name>
      <url>https://opensource.org/licenses/BSD-3-Clause</url>
    </license>
  </licenses>

  <scm>
    <connection>scm:git:git@github.com:ksclarke/jiiify.git</connection>
    <developerConnection>scm:git:git@github.com:ksclarke/jiiify.git</developerConnection>
    <url>git@github.com:ksclarke/jiiify.git</url>
  </scm>

  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/ksclarke/jiiify/issues</url>
  </issueManagement>

  <developers>
    <developer>
      <email>ksclarke@ksclarke.io</email>
      <name>Kevin S. Clarke</name>
      <url>http://kevinclarke.info</url>
      <roles>
        <role>developer</role>
      </roles>
      <timezone>America/New_York</timezone>
    </developer>
  </developers>

  <properties>
    <!-- Application properties -->
    <jiffy.service.prefix>/iiif</jiffy.service.prefix>
    <jiiify.port>8443</jiiify.port>
    <jiiify.host>localhost</jiiify.host>
    <jiiify.redirect.port>8000</jiiify.redirect.port>
    <jiiify.jks>jiiify.jks</jiiify.jks>
    <jiiify.logs.dir>target</jiiify.logs.dir>
    <dev.tools />
    <jiiify.memory />
    <jiiify.cores />
    <jiiify.watch.folder />
    <!-- These are samples for testing purposes only ... DO NOT USE THEM IN PRODUCTION!!! -->
    <jiiify.json.config.path>${project.basedir}/src/main/resources/sample-config.json</jiiify.json.config.path>

    <!-- Versions of dependencies managed in this POM -->
    <vertx.version>3.4.2</vertx.version>
    <javatuples.version>1.2</javatuples.version>
    <commons.cli.version>1.3.1</commons.cli.version>
    <opencsv.version>3.9</opencsv.version>
    <imgscalr.version>4.2</imgscalr.version>
    <twelvemonkeys.version>3.2.1</twelvemonkeys.version>
    <handlebars.version>4.0.6</handlebars.version>
    <scribe.version>1.3.7</scribe.version>
    <json.path.version>2.1.0</json.path.version>
    <codacy.plugin.version>1.0.2</codacy.plugin.version>
    <java.assist.version>3.21.0-GA</java.assist.version>
    <vertx.pairtree.version>0.0.2</vertx.pairtree.version>
    <netty.tcnative.version>1.1.33.Fork26</netty.tcnative.version>

    <!-- Versions of plug-ins managed in this POM -->
    <maven.shade.plugin.version>3.0.0</maven.shade.plugin.version>
    <maven.clean.plugin.version>2.6.1</maven.clean.plugin.version>
    <maven.keytool.plugin.version>1.5</maven.keytool.plugin.version>
    <maven.compiler.plugin.version>3.3</maven.compiler.plugin.version>
    <maven.download.plugin.version>1.3.0</maven.download.plugin.version>

    <!-- This project depends on JDK 8 -->
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <!-- Parent project only uses logback for testing, but we want to use it for real -->
      <scope>compile</scope>
    </dependency>

    <!-- Vertx dependencies -->
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-core</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-service-proxy</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-codegen</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-hazelcast</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-auth-jwt</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-dropwizard-metrics</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web-client</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <!-- Netty dependencies -->
    <dependency>
      <groupId>org.javassist</groupId>
      <artifactId>javassist</artifactId>
      <version>${java.assist.version}</version>
    </dependency>
    <!-- See http://netty.io/wiki/forked-tomcat-native.html for details on below -->
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-tcnative-boringssl-static</artifactId>
      <!-- TODO: Put this in a Maven profile and make it system dependent? -->
      <version>${netty.tcnative.version}</version>
    </dependency>
    <!-- Administrative UI dependencies -->
    <dependency>
      <groupId>com.github.jknack</groupId>
      <artifactId>handlebars</artifactId>
      <version>${handlebars.version}</version>
    </dependency>
    <dependency>
      <groupId>com.github.jknack</groupId>
      <artifactId>handlebars-jackson2</artifactId>
      <version>${handlebars.version}</version>
    </dependency>
    <dependency>
      <groupId>com.opencsv</groupId>
      <artifactId>opencsv</artifactId>
      <version>${opencsv.version}</version>
    </dependency>
    <!-- Just some general utilities -->
    <dependency>
      <groupId>commons-cli</groupId>
      <artifactId>commons-cli</artifactId>
      <version>${commons.cli.version}</version>
    </dependency>
    <dependency>
      <groupId>info.freelibrary</groupId>
      <artifactId>freelib-utils</artifactId>
    </dependency>
    <dependency>
      <groupId>info.freelibrary</groupId>
      <artifactId>vertx-pairtree</artifactId>
      <version>${vertx.pairtree.version}</version>
    </dependency>
    <dependency>
      <groupId>org.javatuples</groupId>
      <artifactId>javatuples</artifactId>
      <version>${javatuples.version}</version>
    </dependency>
    <dependency>
      <groupId>org.scribe</groupId>
      <artifactId>scribe</artifactId>
      <version>${scribe.version}</version>
    </dependency>
    <dependency>
      <groupId>com.jayway.jsonpath</groupId>
      <artifactId>json-path</artifactId>
      <version>${json.path.version}</version>
      <exclusions>
        <!-- json-path's dependencies include duplicate classes, which causes a build warning without the below -->
        <exclusion>
          <groupId>net.minidev</groupId>
          <artifactId>accessors-smart</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <!-- Image-oriented dependencies -->
    <dependency>
      <groupId>org.imgscalr</groupId>
      <artifactId>imgscalr-lib</artifactId>
      <version>${imgscalr.version}</version>
    </dependency>
    <dependency>
      <groupId>com.twelvemonkeys.imageio</groupId>
      <artifactId>imageio-jpeg</artifactId>
      <version>${twelvemonkeys.version}</version>
    </dependency>
    <dependency>
      <groupId>com.twelvemonkeys.imageio</groupId>
      <artifactId>imageio-tiff</artifactId>
      <version>${twelvemonkeys.version}</version>
    </dependency>
    <!-- Below here are our testing dependencies -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.github.detro.ghostdriver</groupId>
      <artifactId>phantomjsdriver</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-unit</artifactId>
      <version>${vertx.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <!-- These resources are packaged into the Jar artifact -->
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
        <excludes>
          <exclude>build.properties</exclude>
        </excludes>
      </resource>
      <resource>
        <directory>src/main/scripts</directory>
        <filtering>false</filtering>
        <includes>
          <include>letsencrypt2jks.sh</include>
        </includes>
      </resource>
      <!-- Other non-packaged resources are processed below by the copy-resources goal -->
    </resources>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>**/*.csv</include>
        </includes>
      </testResource>
    </testResources>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>info.freelibrary</groupId>
          <artifactId>freelib-utils</artifactId>
          <executions>
            <execution>
              <id>configure-java-logging</id>
              <goals>
                <goal>read-logging-properties</goal>
              </goals>
            </execution>
            <execution>
              <id>set-key-pass</id>
              <goals>
                <goal>set-uuid-property</goal>
              </goals>
              <configuration>
                <name>jiiify.key.pass</name>
              </configuration>
            </execution>
            <execution>
              <id>set-system-properties</id>
              <goals>
                <goal>set-cpumem-properties</goal>
              </goals>
              <configuration>
                <!-- Only use a percentage of the free memory on the dev's machine -->
                <free-mem-percent>.8</free-mem-percent>
              </configuration>
            </execution>
            <execution>
              <id>set-file-perms</id>
              <goals>
                <goal>set-file-perms</goal>
              </goals>
              <phase>package</phase>
              <configuration>
                <perms>0775</perms>
                <files>
                  <file>${project.basedir}/target/startup.sh</file>
                  <file>${project.basedir}/target/letsencrypt2jks.sh</file>
                </files>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${maven.compiler.plugin.version}</version>
          <configuration>
            <source>${maven.compiler.source}</source>
            <target>${maven.compiler.target}</target>
            <!-- Don't change format of in/excludes values - https://issues.apache.org/jira/browse/MCOMPILER-98 -->
            <includes>
              <include>**/*.java</include>
            </includes>
            <excludes>
              <exclude>**/NativeImageObject.java</exclude>
            </excludes>
            <annotationProcessors>
              <annotationProcessor>io.vertx.codegen.CodeGenProcessor</annotationProcessor>
            </annotationProcessors>
            <generatedSourcesDirectory>${project.basedir}/src/main/generated</generatedSourcesDirectory>
            <compilerArgs>
              <arg>-Acodegen.output=${project.basedir}/src/main</arg>
            </compilerArgs>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>com.googlecode.maven-download-plugin</groupId>
        <artifactId>download-maven-plugin</artifactId>
        <version>${maven.download.plugin.version}</version>
        <executions>
          <execution>
            <id>install-test-images</id>
            <phase>generate-test-resources</phase>
            <goals>
              <goal>wget</goal>
            </goals>
            <configuration>
              <url>https://s3.amazonaws.com/ksclarke-data/jiiify-test-images.zip</url>
              <unpack>true</unpack>
              <outputDirectory>${project.basedir}/src/test/resources/images</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>${maven.clean.plugin.version}</version>
        <configuration>
          <filesets>
            <!-- Clean automatically generated classes -->
            <fileset>
              <directory>src/main/generated</directory>
              <followSymlinks>false</followSymlinks>
            </fileset>
          </filesets>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-scripts</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>target</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/scripts</directory>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>src/main/resources</directory>
                  <filtering>true</filtering>
                  <includes>
                    <include>build.properties</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-web-resources</id>
            <phase>validate</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <!-- On classpath so it will get bundled up in the executable jar -->
              <outputDirectory>${project.basedir}/target/classes/webroot</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.basedir}/src/main/webapp</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          <stylesheetfile>javadocs.css</stylesheetfile>
          <nonavbar>true</nonavbar>
          <nosince>true</nosince>
          <notimestamp>true</notimestamp>
          <bottom>
          </bottom>
          <detectLinks>false</detectLinks>
          <links>
            <link>https://logback.qos.ch/apidocs</link>
            <link>http://jboss-javassist.github.io/javassist/html</link>
            <link>http://junit.sourceforge.net/javadoc</link>
          </links>
          <sourcepath>src/main/generated;src/main/java</sourcepath>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <!-- Have our tests use the SLF4J loggers -->
        <configuration>
          <systemPropertyVariables>
            <vertx.logger-delegate-factory-class-name>io.vertx.core.logging.SLF4JLogDelegateFactory</vertx.logger-delegate-factory-class-name>
            <jiiify.key.pass>${jiiify.key.pass}</jiiify.key.pass>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <systemPropertyVariables>
            <!-- We can run at a randomly discovered free port for testing -->
            <jiiify.port>${http.port}</jiiify.port>
            <jiiify.service.prefix>/iiif</jiiify.service.prefix>
            <!-- Let our testing framework know what version of PhantomJS we're using -->
            <phantomjs.binary>${phantomjs.binary}</phantomjs.binary>
            <!-- PhantomJS testing setup uses JUL (it's not used by Jiiify though) -->
            <java.util.logging.config.file>${project.basedir}/src/test/resources/jul-logging.properties</java.util.logging.config.file>
            <!-- Have our tests use the SLF4J loggers -->
            <vertx.logger-delegate-factory-class-name>io.vertx.core.logging.SLF4JLogDelegateFactory</vertx.logger-delegate-factory-class-name>
            <!-- Keystore password for testing -->
            <jiiify.key.pass>${jiiify.key.pass}</jiiify.key.pass>
          </systemPropertyVariables>
          <!-- Temporarily turning off integration tests -->
          <skipTests>true</skipTests>
        </configuration>
      </plugin>
      <plugin>
        <groupId>br.com.ingenieux</groupId>
        <artifactId>jbake-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>com.github.klieber</groupId>
        <artifactId>phantomjs-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
      </plugin>
      <!-- Generate our MessageCodes class from the messages resource file -->
      <plugin>
        <groupId>info.freelibrary</groupId>
        <artifactId>freelib-utils</artifactId>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>generate-codes</goal>
            </goals>
            <configuration>
              <generatedSourcesDirectory>${project.basedir}/src/main/generated</generatedSourcesDirectory>
              <messageFiles>
                <messageFile>src/main/resources/jiiify_messages.xml</messageFile>
              </messageFiles>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Plugin to wrap everything in a fat jar for simple deployment -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>${maven.shade.plugin.version}</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <Main-Class>io.vertx.core.Starter</Main-Class>
                    <Main-Verticle>info.freelibrary.jiiify.verticles.JiiifyMainVerticle</Main-Verticle>
                  </manifestEntries>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                  <resource>META-INF/services/io.vertx.core.spi.VerticleFactory</resource>
                </transformer>
                <!-- ServicesResourceTransformer needed for TwelveMonkeys ImageIO discovery -->
                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
              </transformers>
              <artifactSet>
              </artifactSet>
              <outputFile>${project.build.directory}/build-artifact/${project.artifactId}-${project.version}.jar</outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>start-jiiify</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>${project.basedir}/src/test/scripts/pre-it-startup.sh</executable>
              <workingDirectory>${project.basedir}/target</workingDirectory>
              <arguments>
                <argument>java</argument>
                <argument>-Djiiify.file.uploads=java.io.tmpdir</argument>
                <argument>-Djiiify.port=${http.port}</argument>
                <argument>-Djiiify.service.prefix=/iiif</argument>
                <argument>-jar</argument>
                <argument>${project.build.directory}/build-artifact/${project.artifactId}-${project.version}.jar</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>stop-jiiify</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>${project.basedir}/src/test/scripts/post-it-shutdown.sh</executable>
              <workingDirectory>${project.basedir}/target</workingDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.gavinmogan</groupId>
        <artifactId>codacy-maven-plugin</artifactId>
        <version>${codacy.plugin.version}</version>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>self-signed-certificate-creation</id>
      <activation>
        <file>
          <missing>target/classes/jiiify.jks</missing>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <!-- Our default, and for testing purposes, is a self-signed certificate -->
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>keytool-maven-plugin</artifactId>
            <version>${maven.keytool.plugin.version}</version>
            <executions>
              <execution>
                <id>keytool-keyPair</id>
                <goals>
                  <goal>generateKeyPair</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <keystore>target/classes/jiiify.jks</keystore>
                  <storepass>${jiiify.key.pass}</storepass>
                  <keypass>${jiiify.key.pass}</keypass>
                  <alias>jiiify</alias>
                  <dname><![CDATA[cn=${jiiify.host}, ou=Jiiify Image Server, L=Boone, ST=North Carolina, o=FreeLibrary Projects, c=US]]></dname>
                  <sigalg>SHA256withRSA</sigalg>
                  <validity>100</validity>
                  <keyalg>RSA</keyalg>
                  <keysize>1024</keysize>
                </configuration>
              </execution>
              <execution>
                <id>keytool-secretKey-HS256</id>
                <goals>
                  <goal>generateSecretKey</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <keystore>target/classes/jiiify.jceks</keystore>
                  <storepass>${jiiify.key.pass}</storepass>
                  <storetype>jceks</storetype>
                  <keypass>${jiiify.key.pass}</keypass>
                  <alias>HS256</alias>
                  <keyalg>HMacSHA256</keyalg>
                  <keysize>2048</keysize>
                </configuration>
              </execution>
              <execution>
                <id>keytool-secretKey-HS384</id>
                <goals>
                  <goal>generateSecretKey</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <keystore>target/classes/jiiify.jceks</keystore>
                  <storepass>${jiiify.key.pass}</storepass>
                  <storetype>jceks</storetype>
                  <keypass>${jiiify.key.pass}</keypass>
                  <alias>HS384</alias>
                  <keyalg>HMacSHA384</keyalg>
                  <keysize>2048</keysize>
                </configuration>
              </execution>
              <execution>
                <id>keytool-secretKey-HS512</id>
                <goals>
                  <goal>generateSecretKey</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <keystore>target/classes/jiiify.jceks</keystore>
                  <storepass>${jiiify.key.pass}</storepass>
                  <storetype>jceks</storetype>
                  <keypass>${jiiify.key.pass}</keypass>
                  <alias>HS512</alias>
                  <keyalg>HMacSHA512</keyalg>
                  <keysize>2048</keysize>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>self-signed-certificate-update</id>
      <activation>
        <file>
          <exists>target/classes/jiiify.jks</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>properties-maven-plugin</artifactId>
            <executions>
              <execution>
                <phase>generate-resources</phase>
                <goals>
                  <goal>read-project-properties</goal>
                </goals>
                <configuration>
                  <files>
                    <file>${project.build.directory}/build.properties</file>
                  </files>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>keytool-maven-plugin</artifactId>
            <version>${maven.keytool.plugin.version}</version>
            <executions>
              <execution>
                <id>keytool-changeStorePassword-jks</id>
                <goals>
                  <goal>changeStorePassword</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <keystore>target/classes/jiiify.jks</keystore>
                  <storepass>${previous.keystore.password}</storepass>
                  <newPassword>${jiiify.key.pass}</newPassword>
                </configuration>
              </execution>
              <execution>
                <id>keytool-changeStorePassword-jceks</id>
                <goals>
                  <goal>changeStorePassword</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <keystore>target/classes/jiiify.jceks</keystore>
                  <storepass>${previous.keystore.password}</storepass>
                  <newPassword>${jiiify.key.pass}</newPassword>
                  <storetype>jceks</storetype>
                </configuration>
              </execution>
              <execution>
                <id>keytool-changeKeyPassword-jks</id>
                <goals>
                  <goal>changeKeyPassword</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <keystore>target/classes/jiiify.jks</keystore>
                  <storepass>${jiiify.key.pass}</storepass>
                  <keypass>${previous.keystore.password}</keypass>
                  <newPassword>${jiiify.key.pass}</newPassword>
                  <alias>jiiify</alias>
                </configuration>
              </execution>
              <execution>
                <id>keytool-changeKeyPassword-HS256</id>
                <goals>
                  <goal>changeKeyPassword</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <keystore>target/classes/jiiify.jceks</keystore>
                  <storepass>${jiiify.key.pass}</storepass>
                  <keypass>${previous.keystore.password}</keypass>
                  <newPassword>${jiiify.key.pass}</newPassword>
                  <storetype>jceks</storetype>
                  <alias>HS256</alias>
                </configuration>
              </execution>
              <execution>
                <id>keytool-changeKeyPassword-HS384</id>
                <goals>
                  <goal>changeKeyPassword</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <keystore>target/classes/jiiify.jceks</keystore>
                  <storepass>${jiiify.key.pass}</storepass>
                  <keypass>${previous.keystore.password}</keypass>
                  <newPassword>${jiiify.key.pass}</newPassword>
                  <storetype>jceks</storetype>
                  <alias>HS384</alias>
                </configuration>
              </execution>
              <execution>
                <id>keytool-changeKeyPassword-HS512</id>
                <goals>
                  <goal>changeKeyPassword</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <keystore>target/classes/jiiify.jceks</keystore>
                  <storepass>${jiiify.key.pass}</storepass>
                  <keypass>${previous.keystore.password}</keypass>
                  <newPassword>${jiiify.key.pass}</newPassword>
                  <storetype>jceks</storetype>
                  <alias>HS512</alias>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <!-- Enables pushing project documentation up to an S3 bucket -->
  <distributionManagement>
    <site>
      <id>s3.site</id>
      <url>s3://projects.freelibrary.info/jiiify</url>
    </site>
  </distributionManagement>

  <parent>
    <groupId>info.freelibrary</groupId>
    <artifactId>freelib-parent</artifactId>
    <version>0.1.15</version>
  </parent>

</project>
